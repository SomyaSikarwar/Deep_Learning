import pandas as pd
import tensorflow as tf
import tensorflow.keras as keras
import matplotlib.pyplot as plt
     

import numpy as np
     

train_data = pd.read_csv("/content/drive/MyDrive/Colab material/DL Dataset/Practical 4/fashion-mnist_test.csv")
test_data = pd.read_csv("/content/drive/MyDrive/Colab material/DL Dataset/Practical 4/fashion-mnist_train.csv")
     

train_data
x_train = train_data.drop(columns=["label"], axis=1)
y_train = train_data.label.values
     

y_train
x_train = x_train / 255
x_train = x_train.values.reshape(x_train.shape[0], 28, 28, 1)
     

x_train[0]
x_test = test_data.drop(columns=["label"], axis=1)
y_test = test_data.label.values
     

x_test
x_test = x_test / 255
x_test = x_test.values.reshape(x_test.shape[0], 28, 28, 1)
     

np.unique(y_test)
model = keras.Sequential([
    keras.layers.Conv2D(32, (3, 3), activation="relu", input_shape=(28, 28, 1)),
    keras.layers.Conv2D(64, (3, 3), activation="relu"),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Conv2D(128, (4, 4), activation="relu"),
    keras.layers.MaxPooling2D((2, 2)),
    keras.layers.Flatten(),
    keras.layers.Dense(1024, activation="relu"),
    keras.layers.Dense(512, activation="relu"),
    keras.layers.Dense(32, activation="relu"),
    keras.layers.Dense(10, activation="softmax")
])
   model.compile(optimizer="sgd", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
     

model.summary()
report = model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))
plt.figure(figsize=(8,12))

for x in range(0, 6):
  plt.subplot(3,2,x+1)
  plt.title(f"Category : {y_train[x]}")
  plt.imshow(x_train[x])

def softmax_to_category(x):
  return np.argmax(x)
result = model.evaluate(x_test.reshape(x_test.shape[0],28,28,1), y_test)
plt.figure(figsize=(10,5))
plt.title("Model Performance")
plt.subplot(1,2,1)
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.plot(report.history['accuracy'], label='Training Accuracy')
plt.plot(report.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.subplot(1,2,2)
plt.xlabel('Epochs')
plt.ylabel('Score')
plt.plot(report.history['loss'], label='Training Loss')
plt.plot(report.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

plt.figure(figsize=(8,12))

for x in range(6, 12):
  plt.subplot(3,2,x+1-6)
  plt.xlabel(f"Model Prediction Category : {softmax_to_category(model.predict(x_test[x].reshape(1,28,28,1)))}")
  plt.ylabel(f"Actual Category : {y_test[x]}")
  plt.imshow(x_test[x])
