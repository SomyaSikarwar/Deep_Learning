import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
     

from tensorflow.keras.preprocessing.image import ImageDataGenerator
     

datagen = ImageDataGenerator(rescale=1/255)
     

train_data = datagen.flow_from_directory(
    "/content/drive/MyDrive/Colab material/DL Dataset/Practical 5/Chest X-Rays/train",
    target_size=(416,416),
    batch_size=64,
    class_mode="categorical"
)
test_data = datagen.flow_from_directory(
    "/content/drive/MyDrive/Colab material/DL Dataset/Practical 5/Chest X-Rays/test",
    target_size=(416,416),
    batch_size=64,
    class_mode="categorical"
)
validation_data = datagen.flow_from_directory(
    "/content/drive/MyDrive/Colab material/DL Dataset/Practical 5/Chest X-Rays/valid",
    target_size=(416,416),
    batch_size=64,
    class_mode="categorical"
)
from tensorflow import keras
     

model = keras.Sequential([
    keras.layers.Conv2D(64, (3,3), activation="relu", input_shape=(416,416,3)),
    keras.layers.MaxPooling2D((2,2)), # 52

    keras.layers.Conv2D(128, (3,3), activation="relu"),
    keras.layers.MaxPooling2D((2,2)), # 13

    keras.layers.Conv2D(64, (3,3), activation="relu"),
    keras.layers.MaxPooling2D((2,2)), # 13

    keras.layers.Conv2D(128, (3,3), activation="relu"),
    keras.layers.MaxPooling2D((2,2)), # 13

    keras.layers.Conv2D(128, (3,3), activation="relu"),
    keras.layers.MaxPooling2D((2,2)), # 13

    keras.layers.Conv2D(64, (3,3), activation="relu"),
    keras.layers.MaxPooling2D((2,2)), # 13

    keras.layers.Flatten(),

    keras.layers.Dense(256, activation="relu"),
    keras.layers.Dropout(0.2),

    keras.layers.Dense(64, activation="relu"),
    keras.layers.Dropout(0.2),

    keras.layers.Dense(8, activation="relu"),
    keras.layers.Dropout(0.2),

    keras.layers.Dense(2, activation="softmax"),
])
model.compile(optimizer="sgd",loss="categorical_crossentropy",metrics=["accuracy"])
model.summary()
report = model.fit(train_data,epochs=10)
model.evaluate(test_data)
train_data[0][1]
plt.figure(figsize=(8,12))

for x in range(0, 6):
  plt.subplot(3,2,x+1)
  plt.title(f"Category : {train_data[0][1][x]}")
  plt.imshow(train_data[0][0][x])

def softmax_to_category(x):
  return np.argmax(x)
     

plt.figure(figsize=(10,5))
plt.title("Model Performance")
plt.subplot(1,2,1)
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.plot(report.history['accuracy'], label='Training Accuracy')
plt.legend()
plt.subplot(1,2,2)
plt.xlabel('Epochs')
plt.ylabel('Score')
plt.plot(report.history['loss'], label='Training Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()
     
